#!/usr/bin/env python3

import datetime
import socket
import threading
import signal
import sys
import logging
import time

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from server import Customer, Notification, NotificationCounter, process_notification


logging.basicConfig(
    level=logging.DEBUG, format="%(asctime)s %(levelname)s: %(message)s"
)


class NotificationsServer:
    def __init__(self, host: str, port: int, db_url: str):
        # Salvo i parametri per dopo
        self.host = host
        self.port = port
        self.db_url = db_url

        # Server
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.server_socket.bind((self.host, self.port))
        self.server_socket.listen()
        self.clients = []
        self.running = True
        self.lock = threading.Lock()
        self.message_queue = []
        self.message_thread = threading.Thread(target=self.handle_messages)
        self.message_thread.start()

        # Connessione al database
        logging.info(f"Connessione al database: {self.db_url}")
        self.engine = create_engine(self.db_url)
        self.session_factory = sessionmaker(bind=self.engine)

    def start(self):
        # Ricezione dati dai client, ogni connessione in un thread
        # per poter accettare varie connessioni contemporaneamente
        while self.running:
            client_socket, client_address = self.server_socket.accept()
            self.clients.append(client_socket)
            logging.info(f"Nuovo client {client_address}")
            client_thread = threading.Thread(
                target=self.handle_client, args=(client_socket,)
            )
            client_thread.start()

    def stop(self):
        self.running = False
        self.server_socket.close()
        for client_socket in self.clients:
            client_socket.close()
        self.message_thread.join()

    def handle_client(self, client_socket: socket):
        while self.running:
            try:
                data = client_socket.recv(300)
                if data:
                    message = data.decode("utf-8")
                    logging.info(f"Notifica ricevuta: {message}")
                    with self.lock:
                        self.message_queue.append(message)
                    client_socket.send(bytes("OK", "utf-8"))
                else:
                    self.remove_client(client_socket)
            except:
                self.remove_client(client_socket)

    def remove_client(self, client_socket: socket):
        if client_socket in self.clients:
            self.clients.remove(client_socket)
            client_socket.close()
            addr = client_socket.getsockname()
            logging.info(f"Disconnessione client {addr}")

    def handle_messages(self):
        while self.running:
            if self.message_queue:
                with self.lock:
                    # Salvo in locale la coda per gestirmela con calma
                    messages = self.message_queue
                    self.message_queue = []
                # Scrivo sul database la notifica e incremento il contatore giornaliero
                session = self.session_factory()
                for message in messages:
                    with session.begin():
                        logging.info(f"Salvo messaggio: {message}")
                        process_notification(message, session)
                session.close()
            else:
                # Meglio evitare di consumare troppa CPU in questo loop
                time.sleep(0.01)


def signal_handler(sig, frame):
    logging.info(f"Chiusura del server delle notifiche con segnale {sig}")
    notifications_server.stop()
    sys.exit(0)


def main():
    global notifications_server
    notifications_server = NotificationsServer(
        "localhost", 30123, "sqlite:///notifications.db"
    )
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    notifications_server.start()


if __name__ == "__main__":
    main()
